@import './config';
@import './utilities/starts-with';
@import './utilities/ends-with';
@import './functions/has-variant';

@import './mixins/base-declaration';
@import './mixins/hover-variant';
@import './mixins/focus-variant';
@import './mixins/group-hover-variant';
@import './mixins/corner-variants';
@import './mixins/side-variants';

@import './extensions/clearfix';
@import './extensions/container';
@import './extensions/lists';
@import './extensions/pin';
@import './extensions/scrolling';
@import './extensions/truncate';

@mixin extensions($config) {
  @if index(map-get($config, '_extensions'), 'clearfix') {
    @include clearfix($config);
  }
  @if index(map-get($config, '_extensions'), 'container') {
    @include container($config);
  }
  @if index(map-get($config, '_extensions'), 'lists') {
    @include lists($config);
  }
  @if index(map-get($config, '_extensions'), 'pin') {
    @include pin($config);
  }
  @if index(map-get($config, '_extensions'), 'scrolling') {
    @include scrolling($config);
  }
  @if index(map-get($config, '_extensions'), 'truncate') {
    @include truncate($config);
  }
}

// TAKES ONE UTILITY-OBJECT AND OUTPUTS ALL UTILTITY CLASSES (+ VARIANTS)
@mixin utility-with-variants($utility-obj, $property-config, $responsive-screen-alias: null) {
  @include base-declaration($utility-obj,
                            $responsive-screen-alias);

  @if has-variant($property-config, 'state-variants', 'hover') {
    @include hover-variant($utility-obj,
                           $responsive-screen-alias);
  }

  @if has-variant($property-config, 'state-variants', 'focus') {
    @include focus-variant($utility-obj,
                           $responsive-screen-alias);
  }

  @if has-variant($property-config, 'state-variants', 'group-hover') {
    @include group-hover-variant($utility-obj,
                                 $responsive-screen-alias);
  }

  @if has-variant($property-config, 'property-variants', 'sides') {
    @include side-variants($utility-obj,
                           map-get($sasswind-config, '_sides'),
                           $responsive-screen-alias);
  }

  @if has-variant($property-config, 'property-variants', 'corners') {
    @include corner-variants($utility-obj,
                             map-get($sasswind-config, '_corners'),
                             $responsive-screen-alias);
  }
}

// TAKES ONE PROPERTY-OBJECT AND OUTPUTS ALL UTILTITY CLASSES (+ VARIANTS) FOR ALL CLASS OPTIONS
@mixin property-group($property-name, $property-config, $responsive-screen-alias: null) {
  @each $class-alias, $property-value in map-get($property-config, 'class-options') {
    $utility-obj: (
      declaration-property: $property-name,
      declaration-value: $property-value,
      selector-namespace: map-get($property-config, 'class-namespace'),
      selector-alias: $class-alias,
    );

    @include utility-with-variants($utility-obj,
                                   $property-config,
                                   $responsive-screen-alias);
  }
}

// PUBLIC API MIXINS
@mixin apply($selector) {
  @each $property-name, $property-config in $sasswind-config {
    @if not starts-with($property-name, '_') {
      $namespace : map-get($property-config, 'class-namespace');

      @if starts-with($selector, $namespace) {
        @each $class-alias, $property-value in map-get($property-config, 'class-options') {
          @if ends-with($selector, $class-alias) {
            $utility-obj : (
              declaration-property: $property-name,
              declaration-value: $property-value,
              selector-namespace: map-get($property-config, 'class-namespace'),
              selector-alias: $class-alias,
            );
            $option-selector : base-declaration-selector($utility-obj);

            @if $selector == $option-selector {
              $property  : base-declaration-property($utility-obj);
              $value     : map-get($utility-obj, 'declaration-value');

              #{$property}: #{$value}
            }
          }
        }
      }
    }
  }
}

@mixin tailwind-utilities {
  @include extensions($sasswind-config);

  @each $property-name, $property-config in $sasswind-config {
    @if not starts-with($property-name, '_') {
      @include property-group($property-name, $property-config);
    }
  }

  @each $screen-alias, $screen-width in map-get($sasswind-config, '_screens') {
    @media (min-width: #{$screen-width}) {
      @each $property-name, $property-config in $sasswind-config {
        @if not starts-with($property-name, '_') {
          $is-responsive: has-variant($property-config,
                                      'state-variants',
                                      'responsive');

          @if $is-responsive {
            @include property-group($property-name,
                                    $property-config,
                                    $screen-alias);
          }
        }
      }
    }
  }
}
